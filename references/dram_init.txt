enum dram_type {
        DRAM_TYPE_SDR   = 0,
        DRAM_TYPE_DDR   = 1,
        /* Not supported yet. */
        DRAM_TYPE_MDDR  = 2,
};

struct dram_para {
        u32 size;               /* dram size (unit: MByte) */
        u32 clk;                /* dram work clock (unit: MHz) */
        u32 access_mode;        /* 0: interleave mode 1: sequence mode */
        u32 cs_num;             /* dram chip count  1: one chip  2: two chip */
        u32 ddr8_remap;         /* for 8bits data width DDR 0: normal  1: 8bits */
        enum dram_type sdr_ddr;
        u32 bwidth;             /* dram bus width */
        u32 col_width;          /* column address width */
        u32 row_width;          /* row address width */
        u32 bank_size;          /* dram bank count */
        u32 cas;                /* dram cas */
};

struct dram_para suniv_dram_para = {
        .size = 32,
        .clk = 156,
        .access_mode = 1,
        .cs_num = 1,
        .ddr8_remap = 0,
        .sdr_ddr = DRAM_TYPE_DDR,
        .bwidth = 16,
        .col_width = 10,
        .row_width = 13,
        .bank_size = 4,
        .cas = 0x3,
};


static void do_dram_init(struct dram_para *para)
{
        struct sunxi_ccm_reg * const ccm =
                (struct sunxi_ccm_reg *)SUNXI_CCM_BASE;
        u32 val;
        u8 m; /* PLL_DDR clock factor */

        sunxi_gpio_set_cfgpin(SUNXI_GPB(3), 0x7);
        mdelay(5);
        /* TODO: dig out what's them... some analog register? */
        if ((para->cas >> 3) & 0x1)
                setbits_le32(SUNXI_PIO_BASE + 0x2c4, (0x1 << 23) | (0x20 << 17));

        if (para->clk >= 144 && para->clk <= 180)
                writel(0xaaa, SUNXI_PIO_BASE + 0x2c0);
        if (para->clk >= 180)
                writel(0xfff, SUNXI_PIO_BASE + 0x2c0);

        if (para->cas & BIT(4))
                writel(0xd1303333, &ccm->pll5_pattern_cfg);
        else if (para->cas & BIT(5))
                writel(0xcce06666, &ccm->pll5_pattern_cfg);
        else if (para->cas & BIT(6))
                writel(0xc8909999, &ccm->pll5_pattern_cfg);
        else if (para->cas & BIT(7))
                writel(0xc440cccc, &ccm->pll5_pattern_cfg);

        if (para->clk <= 96)
                m = 2;
        else
                m = 1;

        val = CCM_PLL5_CTRL_EN | CCM_PLL5_CTRL_UPD |
              CCM_PLL5_CTRL_N((para->clk * 2) / (24 / m)) |
              CCM_PLL5_CTRL_K(1) | CCM_PLL5_CTRL_M(m);
        if (para->cas & GENMASK(7, 4))
                val |= CCM_PLL5_CTRL_SIGMA_DELTA_EN;
        writel(val, &ccm->pll5_cfg);
        setbits_le32(&ccm->pll5_cfg, CCM_PLL5_CTRL_UPD);
        mctl_await_completion(&ccm->pll5_cfg, BIT(28), BIT(28));
        mdelay(5);

        setbits_le32(&ccm->ahb_gate0, (1 << AHB_GATE_OFFSET_MCTL));
        clrbits_le32(&ccm->ahb_reset0_cfg, (1 << AHB_RESET_OFFSET_MCTL));
        udelay(50);
        setbits_le32(&ccm->ahb_reset0_cfg, (1 << AHB_RESET_OFFSET_MCTL));

        clrsetbits_le32(SUNXI_PIO_BASE + 0x2c4, (1 << 16),
                        ((para->sdr_ddr == DRAM_TYPE_DDR) << 16));

        val = (SDR_T_CAS << 0) | (SDR_T_RAS << 3) | (SDR_T_RCD << 7) |
              (SDR_T_RP << 10) | (SDR_T_WR << 13) | (SDR_T_RFC << 15) |
              (SDR_T_XSR << 19) | (SDR_T_RC << 28);
        writel(val, SUNXI_DRAMC_BASE + DRAM_STMG0R);
        val = (SDR_T_INIT << 0) | (SDR_T_INIT_REF << 16) | (SDR_T_WTR << 20) |
              (SDR_T_RRD << 22) | (SDR_T_XP << 25);
        writel(val, SUNXI_DRAMC_BASE + DRAM_STMG1R);
        dram_para_setup(para);
        dram_check_type(para);

        clrsetbits_le32(SUNXI_PIO_BASE + 0x2c4, (1 << 16),
                        ((para->sdr_ddr == DRAM_TYPE_DDR) << 16));

        dram_set_autofresh_cycle(para->clk);
        dram_scan_readpipe(para);
        dram_get_dram_size(para);
        simple_dram_check();
}
